import * as btc from '@scure/btc-signer';
import * as P from 'micro-packed';
import { UtxoWithTx } from './api';
import { BitcoinNetwork } from './constants';
export declare function stacksAddressBytes(address: string): Uint8Array;
export declare function lengthPrefixedString(something: string | null | undefined, map?: (something: string) => Uint8Array, maxByteLength?: number, prefixByteLength?: number): Uint8Array;
export declare function paymentInfo({ tx, feeRate, utxos, utxoToSpendable, }: {
    tx: btc.Transaction;
    feeRate: number;
    utxos: UtxoWithTx[];
    utxoToSpendable: Partial<SpendableByScriptTypes>;
}): Promise<{
    inputs: ({
        nonWitnessUtxo?: ({
            version: number;
            segwitFlag: boolean;
            inputs: {
                index: number;
                sequence: number;
                txid: Uint8Array;
                finalScriptSig: Uint8Array;
            }[];
            outputs: {
                script: Uint8Array;
                amount: bigint;
            }[];
            lockTime: number;
        } & {
            witnesses?: P.Option<Uint8Array[][]>;
        }) | undefined;
        witnessUtxo?: {
            script: Uint8Array;
            amount: bigint;
        } | undefined;
        partialSig?: [Uint8Array, Uint8Array][] | undefined;
        sighashType?: number | undefined;
        redeemScript?: Uint8Array | undefined;
        witnessScript?: Uint8Array | undefined;
        bip32Derivation?: [Uint8Array, {
            path: number[];
            fingerprint: number;
        }][] | undefined;
        finalScriptSig?: Uint8Array | undefined;
        finalScriptWitness?: Uint8Array[] | undefined;
        porCommitment?: Uint8Array | undefined;
        ripemd160?: [Uint8Array, Uint8Array][] | undefined;
        sha256?: [Uint8Array, Uint8Array][] | undefined;
        hash160?: [Uint8Array, Uint8Array][] | undefined;
        hash256?: [Uint8Array, Uint8Array][] | undefined;
        txid?: Uint8Array | undefined;
        index?: number | undefined;
        sequence?: number | undefined;
        requiredTimeLocktime?: number | undefined;
        requiredHeightLocktime?: number | undefined;
        tapKeySig?: Uint8Array | undefined;
        tapScriptSig?: [{
            pubKey: Uint8Array;
            leafHash: Uint8Array;
        }, Uint8Array][] | undefined;
        tapLeafScript?: [{
            version: number;
            internalKey: Uint8Array;
            merklePath: Uint8Array[];
        }, Uint8Array][] | undefined;
        tapBip32Derivation?: [Uint8Array, {
            hashes: Uint8Array[];
            der: {
                path: number[];
                fingerprint: number;
            };
        }][] | undefined;
        tapInternalKey?: Uint8Array | undefined;
        tapMerkleRoot?: Uint8Array | undefined;
        proprietary?: [Uint8Array, Uint8Array][] | undefined;
    } & {
        unknown?: [{
            type: number;
            key: Uint8Array;
        }, Uint8Array][] | undefined;
    })[];
    totalSats: bigint;
    changeSats: bigint;
}>;
export declare function txBytes(inputs: btc.TransactionInput[], outputs: btc.TransactionOutput[]): number;
export declare function inputBytes(input: btc.TransactionInput): number;
export declare function outputBytes(output: btc.TransactionOutput): number;
export declare function dustMinimum(inputVsize: number, feeRate: number): number;
export type Spendable = {
    input: btc.TransactionInput;
    vsize?: number;
};
export type SpendableByScriptTypes = {
    [Property in 'unknown' | 'sh' | 'wpkh' | 'wsh' | 'pk' | 'pkh' | 'ms' | 'tr' | 'tr_ns' | 'tr_ms']: (opts: UtxoToSpendableOpts) => Spendable | Promise<Spendable>;
};
export declare const DEFAULT_UTXO_TO_SPENDABLE: Partial<SpendableByScriptTypes>;
interface UtxoToSpendableOpts {
    tx: btc.Transaction;
    txHex: string;
    utxo: UtxoWithTx;
    output: ReturnType<btc.Transaction['getOutput']>;
    spendScript: ReturnType<typeof btc.OutScript.decode>;
}
export declare function wpkhUtxoToSpendable(opts: UtxoToSpendableOpts): {
    input: {
        nonWitnessUtxo?: ({
            version: number;
            segwitFlag: boolean;
            inputs: {
                index: number;
                sequence: number;
                txid: Uint8Array;
                finalScriptSig: Uint8Array;
            }[];
            outputs: {
                script: Uint8Array;
                amount: bigint;
            }[];
            lockTime: number;
        } & {
            witnesses?: P.Option<Uint8Array[][]>;
        }) | undefined;
        witnessUtxo?: {
            script: Uint8Array;
            amount: bigint;
        } | undefined;
        partialSig?: [Uint8Array, Uint8Array][] | undefined;
        sighashType?: number | undefined;
        redeemScript?: Uint8Array | undefined;
        witnessScript?: Uint8Array | undefined;
        bip32Derivation?: [Uint8Array, {
            path: number[];
            fingerprint: number;
        }][] | undefined;
        finalScriptSig?: Uint8Array | undefined;
        finalScriptWitness?: Uint8Array[] | undefined;
        porCommitment?: Uint8Array | undefined;
        ripemd160?: [Uint8Array, Uint8Array][] | undefined;
        sha256?: [Uint8Array, Uint8Array][] | undefined;
        hash160?: [Uint8Array, Uint8Array][] | undefined;
        hash256?: [Uint8Array, Uint8Array][] | undefined;
        txid?: Uint8Array | undefined;
        index?: number | undefined;
        sequence?: number | undefined;
        requiredTimeLocktime?: number | undefined;
        requiredHeightLocktime?: number | undefined;
        tapKeySig?: Uint8Array | undefined;
        tapScriptSig?: [{
            pubKey: Uint8Array;
            leafHash: Uint8Array;
        }, Uint8Array][] | undefined;
        tapLeafScript?: [{
            version: number;
            internalKey: Uint8Array;
            merklePath: Uint8Array[];
        }, Uint8Array][] | undefined;
        tapBip32Derivation?: [Uint8Array, {
            hashes: Uint8Array[];
            der: {
                path: number[];
                fingerprint: number;
            };
        }][] | undefined;
        tapInternalKey?: Uint8Array | undefined;
        tapMerkleRoot?: Uint8Array | undefined;
        proprietary?: [Uint8Array, Uint8Array][] | undefined;
    } & {
        unknown?: [{
            type: number;
            key: Uint8Array;
        }, Uint8Array][] | undefined;
    };
    vsize: number;
};
export declare function shUtxoToSpendable(net: BitcoinNetwork, paymentPublicKey: string, opts: UtxoToSpendableOpts): Spendable | Promise<Spendable>;
export declare function utxoSelect({ feeRate, utxos, utxoToSpendable, outputs, }: {
    feeRate: number;
    utxos: UtxoWithTx[];
    utxoToSpendable: Partial<SpendableByScriptTypes>;
    outputs: btc.TransactionOutput[];
}): Promise<{
    inputs: btc.TransactionInput[];
    totalSats: bigint;
    changeSats: bigint;
}>;
export declare function switchUtxoToSpendable(utxo: UtxoWithTx, utxoToSpendable: Partial<SpendableByScriptTypes>): Promise<Spendable>;
type LazyLoadable<T extends object, K extends string> = T & Record<K, any>;
export declare function wrapLazyProxy<T extends {
    [key: string]: any;
}, K extends string, R>(target: T, key: K, resolution: () => R | Promise<R>): LazyLoadable<T, K>;
export {};
