import * as btc from '@scure/btc-signer';
import { BufferCV, SomeCV, TransactionVersion, UIntCV } from '@stacks/transactions';
import RpcClient from '@btc-helpers/rpc';
import { RpcCallSpec } from '@btc-helpers/rpc/dist/callspec';
import { BitcoinNetwork } from './constants';
import { ClarityValue } from '@stacks/transactions';
export type BlockstreamUtxo = {
    txid: string;
    vout: number;
    value: number;
    status: {
        confirmed: boolean;
        block_height: number;
    };
};
export type UtxoWithTx = BlockstreamUtxo & {
    tx: string | Promise<string>;
};
export type SpendableUtxo = BlockstreamUtxo & {
    input: btc.TransactionInput | Promise<btc.TransactionInput>;
    vsize?: number | Promise<number>;
};
export type BlockstreamFeeEstimates = {
    [K in '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12' | '13' | '14' | '15' | '16' | '17' | '18' | '19' | '20' | '21' | '22' | '23' | '24' | '25' | '144' | '504' | '1008']: number;
};
export interface BaseUrlConfig {
    bitcoinElectrsApiUrl: string;
    stacksApiUrl: string;
}
export declare class SbtcApiHelper {
    config: BaseUrlConfig;
    constructor(config: BaseUrlConfig);
    fetchUtxos(address: string): Promise<UtxoWithTx[]>;
    fetchTxHex(txid: string): Promise<string>;
    estimateFeeRates(): Promise<BlockstreamFeeEstimates>;
    estimateFeeRate(target: 'low' | 'medium' | 'high' | number): Promise<number>;
    broadcastTx(tx: btc.Transaction): Promise<string>;
    stacksCallReadOnly({ contractAddress, functionName, sender, args, }: {
        contractAddress: string;
        functionName: string;
        sender?: string;
        args?: ClarityValue[];
    }): Promise<import("@stacks/transactions/dist/clarity/types/booleanCV").TrueCV | import("@stacks/transactions/dist/clarity/types/booleanCV").FalseCV | BufferCV | import("@stacks/transactions/dist/clarity/types/intCV").IntCV | UIntCV | import("@stacks/transactions/dist/clarity/types/principalCV").StandardPrincipalCV | import("@stacks/transactions/dist/clarity/types/principalCV").ContractPrincipalCV | import("@stacks/transactions/dist/clarity/types/responseCV").ResponseErrorCV<ClarityValue> | import("@stacks/transactions/dist/clarity/types/responseCV").ResponseOkCV<ClarityValue> | import("@stacks/transactions/dist/clarity/types/optionalCV").NoneCV | SomeCV<ClarityValue> | import("@stacks/transactions/dist/clarity/types/listCV").ListCV<ClarityValue> | import("@stacks/transactions/dist/clarity/types/tupleCV").TupleCV<{
        [key: string]: ClarityValue;
    }> | import("@stacks/transactions/dist/clarity/types/stringCV").StringAsciiCV | import("@stacks/transactions/dist/clarity/types/stringCV").StringUtf8CV>;
    getBalance(address: string): Promise<number>;
    getSbtcBalance({ holderAddress, sbtcContract, }: {
        holderAddress: string;
        sbtcContract: string;
    }): Promise<bigint>;
    getBitcoinAccount(mnemonic: string, idx?: number): Promise<{
        privateKey: Uint8Array;
        publicKey: Uint8Array;
        wpkh: {
            address: string;
        };
        tr: {
            address: string;
            publicKey: Uint8Array;
        };
    }>;
    getStacksAccount(mnemonic: string, idx?: number): Promise<{
        stxPrivateKey: string;
        privateKey: string;
        address: string;
    }>;
}
export declare class TestnetHelper extends SbtcApiHelper {
    constructor(config?: Partial<BaseUrlConfig>);
    getSbtcPegAddress(contractAddress?: string): Promise<string>;
    getBitcoinAccount(mnemonic: string, idx?: number): Promise<{
        privateKey: Uint8Array;
        publicKey: Uint8Array;
        wpkh: {
            address: string;
        };
        tr: {
            address: string;
            publicKey: Uint8Array;
        };
    }>;
    getStacksAccount(mnemonic: string, idx?: number): Promise<{
        stxPrivateKey: string;
        privateKey: string;
        address: string;
    }>;
}
export declare class DevEnvHelper extends SbtcApiHelper {
    btcRpc: RpcClient & RpcCallSpec;
    constructor(config?: Partial<BaseUrlConfig & {
        bitcoinCoreRpcUrl: string;
    }>);
    getSbtcPegAddress(): Promise<string>;
    getBitcoinAccount(mnemonic: string, idx?: number): Promise<{
        privateKey: Uint8Array;
        publicKey: Uint8Array;
        wpkh: {
            address: string;
        };
        tr: {
            address: string;
            publicKey: Uint8Array;
        };
    }>;
    getStacksAccount(mnemonic: string, idx?: number): Promise<{
        stxPrivateKey: string;
        privateKey: string;
        address: string;
    }>;
}
export declare const WALLET_00 = "twice kind fence tip hidden tilt action fragile skin nothing glory cousin green tomorrow spring wrist shed math olympic multiply hip blue scout claw";
export declare const WALLET_01 = "sell invite acquire kitten bamboo drastic jelly vivid peace spawn twice guilt pave pen trash pretty park cube fragile unaware remain midnight betray rebuild";
export declare const WALLET_02 = "hold excess usual excess ring elephant install account glad dry fragile donkey gaze humble truck breeze nation gasp vacuum limb head keep delay hospital";
export declare function getBitcoinAccount(network: BitcoinNetwork, mnemonic: string, idx?: number): Promise<{
    privateKey: Uint8Array;
    publicKey: Uint8Array;
    wpkh: {
        address: string;
    };
    tr: {
        address: string;
        publicKey: Uint8Array;
    };
}>;
export declare function getStacksAccount(transactionVersion: TransactionVersion, mnemonic: string, idx?: number): Promise<{
    stxPrivateKey: string;
    privateKey: string;
    address: string;
}>;
export declare function sleep(ms: number): Promise<unknown>;
