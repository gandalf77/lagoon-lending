"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sbtcDepositHelper = exports.buildSbtcDepositTxOpReturn = exports.buildSbtcDepositTx = exports.buildSBtcDepositBtcPayload = void 0;
const btc = __importStar(require("@scure/btc-signer"));
const common_1 = require("@stacks/common");
const P = __importStar(require("micro-packed"));
const constants_1 = require("../constants");
const utils_1 = require("../utils");
const concat = P.concatBytes;
function buildSBtcDepositBtcPayload({ network, address, }) {
    const magicBytes = (0, common_1.asciiToBytes)(network.magicBytes);
    const opCodeBytes = (0, common_1.hexToBytes)(constants_1.OpCode.PegIn);
    const principalTypeBytes = address.includes('.') ? (0, common_1.hexToBytes)('06') : (0, common_1.hexToBytes)('05');
    return concat(magicBytes, opCodeBytes, principalTypeBytes, (0, utils_1.stacksAddressBytes)(address));
}
exports.buildSBtcDepositBtcPayload = buildSBtcDepositBtcPayload;
exports.buildSbtcDepositTx = buildSbtcDepositTxOpReturn;
function buildSbtcDepositTxOpReturn({ network = constants_1.REGTEST, amountSats, stacksAddress, pegAddress = constants_1.SBTC_PEG_ADDRESS_DEVENV, }) {
    const data = buildSBtcDepositBtcPayload({ network, address: stacksAddress });
    const tx = new btc.Transaction({
        allowUnknownInputs: true,
        allowUnknownOutputs: true,
    });
    tx.addOutput({ script: btc.Script.encode(['RETURN', data]), amount: BigInt(0) });
    tx.addOutputAddress(pegAddress, BigInt(amountSats), network);
    return tx;
}
exports.buildSbtcDepositTxOpReturn = buildSbtcDepositTxOpReturn;
async function sbtcDepositHelper({ network = constants_1.REGTEST, amountSats, stacksAddress, bitcoinChangeAddress, feeRate, utxos, utxoToSpendable = utils_1.DEFAULT_UTXO_TO_SPENDABLE, pegAddress = constants_1.SBTC_PEG_ADDRESS_DEVENV, paymentPublicKey, }) {
    if (paymentPublicKey) {
        utxoToSpendable.sh = utils_1.shUtxoToSpendable.bind(null, network, paymentPublicKey);
    }
    const tx = buildSbtcDepositTxOpReturn({ network, amountSats, stacksAddress, pegAddress });
    const pay = await (0, utils_1.paymentInfo)({ tx, feeRate, utxos, utxoToSpendable });
    for (const input of pay.inputs)
        tx.addInput(input);
    const changeAfterAdditionalOutput = pay.changeSats - BigInt(Math.ceil(constants_1.VSIZE_INPUT_P2WPKH * feeRate));
    if (changeAfterAdditionalOutput > (0, utils_1.dustMinimum)(constants_1.VSIZE_INPUT_P2WPKH, feeRate)) {
        tx.addOutputAddress(bitcoinChangeAddress, changeAfterAdditionalOutput, network);
    }
    return tx;
}
exports.sbtcDepositHelper = sbtcDepositHelper;
//# sourceMappingURL=deposit.js.map