"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sbtcWithdrawMessage = exports.buildSBtcWithdrawBtcPayload = exports.buildSbtcWithdrawTxOpReturn = exports.buildSbtcWithdrawTx = exports.sbtcWithdrawHelper = void 0;
const btc = __importStar(require("@scure/btc-signer"));
const common_1 = require("@stacks/common");
const P = __importStar(require("micro-packed"));
const constants_1 = require("../constants");
const utils_1 = require("../utils");
const concat = P.concatBytes;
async function sbtcWithdrawHelper({ network = constants_1.REGTEST, amountSats, signature, fulfillmentFeeSats, bitcoinAddress, bitcoinChangeAddress, pegAddress = constants_1.SBTC_PEG_ADDRESS_DEVENV, feeRate, utxos, utxoToSpendable = utils_1.DEFAULT_UTXO_TO_SPENDABLE, paymentPublicKey, }) {
    if (paymentPublicKey) {
        utxoToSpendable.sh = utils_1.shUtxoToSpendable.bind(null, network, paymentPublicKey);
    }
    const tx = buildSbtcWithdrawTxOpReturn({
        network,
        amountSats,
        signature,
        bitcoinAddress,
    });
    tx.addOutputAddress(pegAddress, BigInt(fulfillmentFeeSats), network);
    const pay = await (0, utils_1.paymentInfo)({ tx, feeRate, utxos, utxoToSpendable });
    for (const input of pay.inputs)
        tx.addInput(input);
    const changeAfterAdditionalOutput = pay.changeSats - BigInt(Math.ceil(constants_1.VSIZE_INPUT_P2WPKH * feeRate));
    if (changeAfterAdditionalOutput > (0, utils_1.dustMinimum)(constants_1.VSIZE_INPUT_P2WPKH, feeRate)) {
        tx.addOutputAddress(bitcoinChangeAddress, changeAfterAdditionalOutput, network);
    }
    return tx;
}
exports.sbtcWithdrawHelper = sbtcWithdrawHelper;
exports.buildSbtcWithdrawTx = buildSbtcWithdrawTxOpReturn;
function buildSbtcWithdrawTxOpReturn({ network = constants_1.REGTEST, amountSats, signature, bitcoinAddress, }) {
    const data = buildSBtcWithdrawBtcPayload({ network, amountSats, signature });
    const tx = new btc.Transaction({
        allowUnknownInputs: true,
        allowUnknownOutputs: true,
    });
    tx.addOutput({ script: btc.Script.encode(['RETURN', data]), amount: BigInt(0) });
    tx.addOutputAddress(bitcoinAddress, BigInt(amountSats), network);
    return tx;
}
exports.buildSbtcWithdrawTxOpReturn = buildSbtcWithdrawTxOpReturn;
function buildSBtcWithdrawBtcPayload({ network = constants_1.REGTEST, amountSats, signature, }) {
    const magicBytes = (0, common_1.asciiToBytes)(network.magicBytes);
    const opCodeBytes = (0, common_1.hexToBytes)(constants_1.OpCode.PegOut);
    const amountBytes = P.U64BE.encode(BigInt(amountSats));
    const signatureBytes = (0, common_1.hexToBytes)(signature.slice(signature.length - 2) + signature.slice(0, -2));
    return concat(magicBytes, opCodeBytes, amountBytes, signatureBytes);
}
exports.buildSBtcWithdrawBtcPayload = buildSBtcWithdrawBtcPayload;
function sbtcWithdrawMessage({ network = constants_1.REGTEST, amountSats, bitcoinAddress, }) {
    const amountBytes = P.U64BE.encode(BigInt(amountSats));
    const scriptOut = btc.OutScript.encode(btc.Address(network).decode(bitcoinAddress));
    const data = concat(amountBytes, scriptOut);
    return `Withdraw request for ${amountSats} satoshis to the bitcoin address ${bitcoinAddress} (${(0, common_1.bytesToHex)(data)})`;
}
exports.sbtcWithdrawMessage = sbtcWithdrawMessage;
//# sourceMappingURL=withdraw.js.map